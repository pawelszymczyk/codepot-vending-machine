// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine.infrastructure;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class VendingMachineModule$$ModuleAdapter extends ModuleAdapter<VendingMachineModule> {
  private static final String[] INJECTS = { "members/codepot.vendingmachine.domain.VendingMachine", "members/codepot.vendingmachine.domain.Transaction", "codepot.vendingmachine.domain.TransactionFactory", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public VendingMachineModule$$ModuleAdapter() {
    super(codepot.vendingmachine.infrastructure.VendingMachineModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public VendingMachineModule newModule() {
    return new codepot.vendingmachine.infrastructure.VendingMachineModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, VendingMachineModule module) {
    bindings.contributeProvidesBinding("codepot.vendingmachine.domain.Transaction", new TransactionProvidesAdapter(module));
    bindings.contributeProvidesBinding("codepot.vendingmachine.domain.TransactionFactory", new TransactionFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("codepot.vendingmachine.domain.VendingMachine", new VendingMachineProvidesAdapter(module));
  }

  /**
   * A {@code Binding<codepot.vendingmachine.domain.Transaction>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<codepot.vendingmachine.domain.Transaction>} and handling creation and
   * preparation of object instances.
   */
  public static final class TransactionProvidesAdapter extends ProvidesBinding<codepot.vendingmachine.domain.Transaction>
      implements Provider<codepot.vendingmachine.domain.Transaction> {
    private final VendingMachineModule module;

    public TransactionProvidesAdapter(VendingMachineModule module) {
      super("codepot.vendingmachine.domain.Transaction", NOT_SINGLETON, "codepot.vendingmachine.infrastructure.VendingMachineModule", "transaction");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<codepot.vendingmachine.domain.Transaction>}.
     */
    @Override
    public codepot.vendingmachine.domain.Transaction get() {
      return module.transaction();
    }
  }

  /**
   * A {@code Binding<codepot.vendingmachine.domain.TransactionFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code codepot.vendingmachine.domain.TransactionFactory} and its
   * dependencies.
   *
   * Being a {@code Provider<codepot.vendingmachine.domain.TransactionFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class TransactionFactoryProvidesAdapter extends ProvidesBinding<codepot.vendingmachine.domain.TransactionFactory>
      implements Provider<codepot.vendingmachine.domain.TransactionFactory> {
    private final VendingMachineModule module;
    private Binding<Provider<codepot.vendingmachine.domain.Transaction>> transactionProvider;

    public TransactionFactoryProvidesAdapter(VendingMachineModule module) {
      super("codepot.vendingmachine.domain.TransactionFactory", IS_SINGLETON, "codepot.vendingmachine.infrastructure.VendingMachineModule", "transactionFactory");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      transactionProvider = (Binding<Provider<codepot.vendingmachine.domain.Transaction>>) linker.requestBinding("javax.inject.Provider<codepot.vendingmachine.domain.Transaction>", VendingMachineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(transactionProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<codepot.vendingmachine.domain.TransactionFactory>}.
     */
    @Override
    public codepot.vendingmachine.domain.TransactionFactory get() {
      return module.transactionFactory(transactionProvider.get());
    }
  }

  /**
   * A {@code Binding<codepot.vendingmachine.domain.VendingMachine>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code codepot.vendingmachine.domain.VendingMachine} and its
   * dependencies.
   *
   * Being a {@code Provider<codepot.vendingmachine.domain.VendingMachine>} and handling creation and
   * preparation of object instances.
   */
  public static final class VendingMachineProvidesAdapter extends ProvidesBinding<codepot.vendingmachine.domain.VendingMachine>
      implements Provider<codepot.vendingmachine.domain.VendingMachine> {
    private final VendingMachineModule module;
    private Binding<codepot.vendingmachine.domain.TransactionFactory> transactionFactory;

    public VendingMachineProvidesAdapter(VendingMachineModule module) {
      super("codepot.vendingmachine.domain.VendingMachine", IS_SINGLETON, "codepot.vendingmachine.infrastructure.VendingMachineModule", "vendingMachine");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      transactionFactory = (Binding<codepot.vendingmachine.domain.TransactionFactory>) linker.requestBinding("codepot.vendingmachine.domain.TransactionFactory", VendingMachineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(transactionFactory);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<codepot.vendingmachine.domain.VendingMachine>}.
     */
    @Override
    public codepot.vendingmachine.domain.VendingMachine get() {
      return module.vendingMachine(transactionFactory.get());
    }
  }
}
