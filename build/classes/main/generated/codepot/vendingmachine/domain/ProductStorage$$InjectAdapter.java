// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine.domain;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<ProductStorage>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ProductStorage} and its
 * dependencies.
 *
 * Being a {@code Provider<ProductStorage>} and handling creation and
 * preparation of object instances.
 */
public final class ProductStorage$$InjectAdapter extends Binding<ProductStorage>
    implements Provider<ProductStorage> {
  private Binding<java.util.List<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>> serviceNotifiers;

  public ProductStorage$$InjectAdapter() {
    super("codepot.vendingmachine.domain.ProductStorage", "members/codepot.vendingmachine.domain.ProductStorage", NOT_SINGLETON, ProductStorage.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    serviceNotifiers = (Binding<java.util.List<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>>) linker.requestBinding("java.util.List<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>", ProductStorage.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(serviceNotifiers);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<ProductStorage>}.
   */
  @Override
  public ProductStorage get() {
    ProductStorage result = new ProductStorage(serviceNotifiers.get());
    return result;
  }

}
