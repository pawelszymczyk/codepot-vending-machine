// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine.domain;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<CoinBank>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code CoinBank} and its
 * dependencies.
 *
 * Being a {@code Provider<CoinBank>} and handling creation and
 * preparation of object instances.
 */
public final class CoinBank$$InjectAdapter extends Binding<CoinBank>
    implements Provider<CoinBank> {
  private Binding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier> notifier;

  public CoinBank$$InjectAdapter() {
    super("codepot.vendingmachine.domain.CoinBank", "members/codepot.vendingmachine.domain.CoinBank", NOT_SINGLETON, CoinBank.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    notifier = (Binding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>) linker.requestBinding("codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier", CoinBank.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(notifier);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<CoinBank>}.
   */
  @Override
  public CoinBank get() {
    CoinBank result = new CoinBank(notifier.get());
    return result;
  }

}
