// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine.infrastructure;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<VendingMachineModule>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code VendingMachineModule} and its
 * dependencies.
 *
 * Being a {@code Provider<VendingMachineModule>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<VendingMachineModule>} and handling injection
 * of annotated fields.
 */
public final class VendingMachineModule$$InjectAdapter extends Binding<VendingMachineModule>
    implements Provider<VendingMachineModule>, MembersInjector<VendingMachineModule> {
  private Binding<dagger.ObjectGraph> objectGraph;

  public VendingMachineModule$$InjectAdapter() {
    super("codepot.vendingmachine.infrastructure.VendingMachineModule", "members/codepot.vendingmachine.infrastructure.VendingMachineModule", NOT_SINGLETON, VendingMachineModule.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    objectGraph = (Binding<dagger.ObjectGraph>) linker.requestBinding("dagger.ObjectGraph", VendingMachineModule.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(objectGraph);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<VendingMachineModule>}.
   */
  @Override
  public VendingMachineModule get() {
    VendingMachineModule result = new VendingMachineModule();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<VendingMachineModule>}.
   */
  @Override
  public void injectMembers(VendingMachineModule object) {
    object.objectGraph = objectGraph.get();
  }

}
