// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine.infrastructure;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DaggerTransactionFactory>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DaggerTransactionFactory} and its
 * dependencies.
 *
 * Being a {@code Provider<DaggerTransactionFactory>} and handling creation and
 * preparation of object instances.
 */
public final class DaggerTransactionFactory$$InjectAdapter extends Binding<DaggerTransactionFactory>
    implements Provider<DaggerTransactionFactory> {
  private Binding<Provider<codepot.vendingmachine.domain.Transaction>> transactionProvider;

  public DaggerTransactionFactory$$InjectAdapter() {
    super("codepot.vendingmachine.infrastructure.DaggerTransactionFactory", "members/codepot.vendingmachine.infrastructure.DaggerTransactionFactory", NOT_SINGLETON, DaggerTransactionFactory.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    transactionProvider = (Binding<Provider<codepot.vendingmachine.domain.Transaction>>) linker.requestBinding("javax.inject.Provider<codepot.vendingmachine.domain.Transaction>", DaggerTransactionFactory.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(transactionProvider);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DaggerTransactionFactory>}.
   */
  @Override
  public DaggerTransactionFactory get() {
    DaggerTransactionFactory result = new DaggerTransactionFactory(transactionProvider.get());
    return result;
  }

}
