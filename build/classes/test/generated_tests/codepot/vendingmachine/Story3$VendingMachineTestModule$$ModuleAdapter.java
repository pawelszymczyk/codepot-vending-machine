// Code generated by dagger-compiler.  Do not edit.
package codepot.vendingmachine;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class Story3$VendingMachineTestModule$$ModuleAdapter extends ModuleAdapter<Story3.VendingMachineTestModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public Story3$VendingMachineTestModule$$ModuleAdapter() {
    super(codepot.vendingmachine.Story3.VendingMachineTestModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, Story3.VendingMachineTestModule module) {
    bindings.contributeProvidesBinding("@javax.inject.Named(value=smsServiceNotifier)/codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier", new SmsServiceNotifierProvidesAdapter(module));
    bindings.contributeProvidesBinding("codepot.vendingmachine.domain.CoinBank", new CoinBankProvidesAdapter(module));
  }

  /**
   * A {@code Binding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>} and handling creation and
   * preparation of object instances.
   */
  public static final class SmsServiceNotifierProvidesAdapter extends ProvidesBinding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>
      implements Provider<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier> {
    private final Story3.VendingMachineTestModule module;

    public SmsServiceNotifierProvidesAdapter(Story3.VendingMachineTestModule module) {
      super("@javax.inject.Named(value=smsServiceNotifier)/codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier", IS_SINGLETON, "codepot.vendingmachine.Story3.VendingMachineTestModule", "smsServiceNotifier");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>}.
     */
    @Override
    public codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier get() {
      return module.smsServiceNotifier();
    }
  }

  /**
   * A {@code Binding<codepot.vendingmachine.domain.CoinBank>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code codepot.vendingmachine.domain.CoinBank} and its
   * dependencies.
   *
   * Being a {@code Provider<codepot.vendingmachine.domain.CoinBank>} and handling creation and
   * preparation of object instances.
   */
  public static final class CoinBankProvidesAdapter extends ProvidesBinding<codepot.vendingmachine.domain.CoinBank>
      implements Provider<codepot.vendingmachine.domain.CoinBank> {
    private final Story3.VendingMachineTestModule module;
    private Binding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier> serviceNotifier;

    public CoinBankProvidesAdapter(Story3.VendingMachineTestModule module) {
      super("codepot.vendingmachine.domain.CoinBank", IS_SINGLETON, "codepot.vendingmachine.Story3.VendingMachineTestModule", "coinBank");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      serviceNotifier = (Binding<codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier>) linker.requestBinding("@javax.inject.Named(value=smsServiceNotifier)/codepot.vendingmachine.infrastructure.notifiers.ServiceNotifier", Story3.VendingMachineTestModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(serviceNotifier);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<codepot.vendingmachine.domain.CoinBank>}.
     */
    @Override
    public codepot.vendingmachine.domain.CoinBank get() {
      return module.coinBank(serviceNotifier.get());
    }
  }
}
